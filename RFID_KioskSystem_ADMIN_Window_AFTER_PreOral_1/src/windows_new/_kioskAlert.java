/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package windows_new;

import global.DatabaseConnection;
import java.awt.Color;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author USER
 */
public class _kioskAlert extends javax.swing.JPanel {

    private DefaultTableModel tableModel;
    List<Object[]> results = new ArrayList<>();
    String studentFullName;
    String programCode;
    String currentYear;
    String currentBlock;
    String subjectCode;
    double rating;
    String remark;
    String descrip;
    
    int recordID;
    public _kioskAlert() {
        initComponents();
        
        pan_kioskAlertInfo.setBorder(null);
        txt_newGrade.setEditable(true);  // Allow editing

        
        // Initialize the table model with default columns
        String[] columns = {"DateTime", "Student Name", "Subject"};
        tableModel = new DefaultTableModel(columns, 0){
            @Override
            public boolean isCellEditable(int row, int column) {
                return false; //no cell editable
            }
        };

        
        // Set the table model to jTable1
        jTable1.setModel(tableModel);
        
        // tab;e appearance
        jTable1.setBackground(Color.WHITE);
        jTable1.setGridColor(Color.BLACK);  // Set grid line color
        jTable1.getTableHeader().setBackground(Color.LIGHT_GRAY);  // Header background color
        jTable1.setRowHeight(30);
        
        refreshTable_UpdateList();

        // Add MouseListener for row selection in jTable1
        jTable1.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                // Get the selected row index
                int row = jTable1.getSelectedRow();

                // Check if the row is valid
                if (row != -1) {
                    // Retrieve the full row data from the results list
                    Object[] selectedRowData = results.get(row);

                    // Extract the necessary data (corrected indices based on fullRow)
                    studentFullName = (String) selectedRowData[0];  // Student Name
                    programCode = (String) selectedRowData[1];  // Program Code
                    currentYear = (String) selectedRowData[2];  // Current Year (String)
                    currentBlock = (String) selectedRowData[3];  // Current Block (String)
                    subjectCode = (String) selectedRowData[4];  // Subject Code
                    rating = (Double) selectedRowData[5];  // Rating
                    remark = (String) selectedRowData[6];  // Remark
                    descrip = (String) selectedRowData[9]; //Description
                    recordID = (int) selectedRowData[10];

                    // Update the labels with the corresponding data
                    lbl_seeName.setText(studentFullName);
                    lbl_seeProgYrBlk.setText(programCode + " " + currentYear + " - " + currentBlock);
                    lbl_seeCode.setText(subjectCode);
                    lbl_seeDescrip.setText(descrip);
                    lbl_seeGrade.setText(String.valueOf(rating));
                    lbl_seeRatingNote.setText(remark);
                }
            }
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel6 = new javax.swing.JLabel();
        jlblCourse1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        pan_kioskAlertInfo = new javax.swing.JPanel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        txt_newGrade = new javax.swing.JTextField();
        btn_updateRecord = new javax.swing.JButton();
        combo_remark = new javax.swing.JComboBox<>();
        lbl_seeRatingNote = new javax.swing.JLabel();
        lbl_seeDescrip = new javax.swing.JLabel();
        lbl_seeName = new javax.swing.JLabel();
        lbl_seeGrade = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        lbl_seeCode = new javax.swing.JLabel();
        jLabel18 = new javax.swing.JLabel();
        lbl_seeProgYrBlk = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();

        setBackground(new java.awt.Color(255, 255, 255));
        setAutoscrolls(true);
        setMaximumSize(new java.awt.Dimension(1100, 630));
        setMinimumSize(new java.awt.Dimension(1100, 630));
        setPreferredSize(new java.awt.Dimension(1080, 630));
        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel6.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(0, 0, 0));
        jLabel6.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel6.setText("KIOSK ALERTS");
        add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 0, 310, 50));

        jlblCourse1.setFont(new java.awt.Font("Segoe UI", 0, 8)); // NOI18N
        jlblCourse1.setForeground(new java.awt.Color(153, 153, 153));
        jlblCourse1.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jlblCourse1.setText("RFID-Based Kiosk System for Student Evaluation _ ACI Capstone for MIT 2024 _ JCA");
        jlblCourse1.setToolTipText("");
        add(jlblCourse1, new org.netbeans.lib.awtextra.AbsoluteConstraints(700, 600, 380, 20));

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "DateTime", "Student", "Subject"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable1.setToolTipText("");
        jTable1.setGridColor(new java.awt.Color(255, 255, 255));
        jTable1.setShowHorizontalLines(true);
        jTable1.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(jTable1);

        add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 50, 710, 540));

        pan_kioskAlertInfo.setBackground(new java.awt.Color(255, 255, 255));
        pan_kioskAlertInfo.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        pan_kioskAlertInfo.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel8.setText("Student Name");
        pan_kioskAlertInfo.add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 20, 90, 20));

        jLabel9.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel9.setForeground(new java.awt.Color(204, 0, 0));
        jLabel9.setText("Updated Remark");
        pan_kioskAlertInfo.add(jLabel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 320, 110, 20));

        jLabel10.setText("Course Description");
        pan_kioskAlertInfo.add(jLabel10, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 200, 130, 20));

        jLabel11.setText("Remarks");
        pan_kioskAlertInfo.add(jLabel11, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 260, 90, 20));

        jLabel13.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel13.setForeground(new java.awt.Color(204, 0, 0));
        jLabel13.setText("Updated Grade");
        pan_kioskAlertInfo.add(jLabel13, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 320, 110, 20));

        txt_newGrade.setEditable(false);
        txt_newGrade.setBackground(new java.awt.Color(255, 255, 255));
        txt_newGrade.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        txt_newGrade.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txt_newGradeActionPerformed(evt);
            }
        });
        pan_kioskAlertInfo.add(txt_newGrade, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 340, 140, 40));

        btn_updateRecord.setBackground(new java.awt.Color(0, 51, 102));
        btn_updateRecord.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        btn_updateRecord.setForeground(new java.awt.Color(255, 255, 255));
        btn_updateRecord.setText("UPDATE RECORD");
        btn_updateRecord.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_updateRecordActionPerformed(evt);
            }
        });
        pan_kioskAlertInfo.add(btn_updateRecord, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 410, 210, 40));

        combo_remark.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select", "Passed", "Incomplete", "Failed", "Dropped" }));
        pan_kioskAlertInfo.add(combo_remark, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 340, 150, 40));

        lbl_seeRatingNote.setFont(new java.awt.Font("Segoe UI", 1, 15)); // NOI18N
        lbl_seeRatingNote.setForeground(new java.awt.Color(204, 0, 0));
        lbl_seeRatingNote.setText("-");
        lbl_seeRatingNote.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        pan_kioskAlertInfo.add(lbl_seeRatingNote, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 280, 130, 30));

        lbl_seeDescrip.setFont(new java.awt.Font("Segoe UI", 1, 15)); // NOI18N
        lbl_seeDescrip.setText("-");
        lbl_seeDescrip.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        pan_kioskAlertInfo.add(lbl_seeDescrip, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 220, 290, 30));

        lbl_seeName.setFont(new java.awt.Font("Segoe UI", 1, 15)); // NOI18N
        lbl_seeName.setText("-");
        lbl_seeName.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        pan_kioskAlertInfo.add(lbl_seeName, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 40, 290, 30));

        lbl_seeGrade.setFont(new java.awt.Font("Segoe UI", 1, 15)); // NOI18N
        lbl_seeGrade.setForeground(new java.awt.Color(204, 0, 0));
        lbl_seeGrade.setText("-");
        lbl_seeGrade.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        pan_kioskAlertInfo.add(lbl_seeGrade, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 280, 130, 30));

        jLabel17.setText("Course Code");
        pan_kioskAlertInfo.add(jLabel17, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 140, 90, 20));

        lbl_seeCode.setFont(new java.awt.Font("Segoe UI", 1, 15)); // NOI18N
        lbl_seeCode.setText("-");
        lbl_seeCode.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        pan_kioskAlertInfo.add(lbl_seeCode, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 160, 150, 30));

        jLabel18.setText("Program/Year/Block");
        pan_kioskAlertInfo.add(jLabel18, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 80, 130, 20));

        lbl_seeProgYrBlk.setFont(new java.awt.Font("Segoe UI", 1, 15)); // NOI18N
        lbl_seeProgYrBlk.setText("-");
        lbl_seeProgYrBlk.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        pan_kioskAlertInfo.add(lbl_seeProgYrBlk, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 100, 290, 30));

        jLabel12.setText("Existing Grade");
        pan_kioskAlertInfo.add(jLabel12, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 260, 90, 20));

        add(pan_kioskAlertInfo, new org.netbeans.lib.awtextra.AbsoluteConstraints(750, 60, 320, 530));
    }// </editor-fold>//GEN-END:initComponents

    private void txt_newGradeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txt_newGradeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txt_newGradeActionPerformed

    private void btn_updateRecordActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_updateRecordActionPerformed
        String newGrade = txt_newGrade.getText();
        String newRemark = (String) combo_remark.getSelectedItem();
        System.out.println(recordID);
        double grade=0.0;
        try {
            grade = Double.parseDouble(newGrade);

            if (grade>100) {
                JOptionPane.showMessageDialog(null,
                    "Number exceeds limit.",
                    "Invalid Input.",
                    JOptionPane.WARNING_MESSAGE);
            }else{
                if(newRemark.equals("Select")){
                    JOptionPane.showMessageDialog(null,
                        "No selected remark.",
                        "Invalid Input.",
                        JOptionPane.WARNING_MESSAGE);
                }else{
                    //                    if (grade>75) {
                        //                        newRemark="Passed";
                        //                    }
                    if (newRemark.equals("Incomplete") || newRemark.equals("Failed")) {
                        newRemark=newRemark.toUpperCase();
                    }

                    // Prepare the SQL query to update the grade, remark, reviewed, and reviewed_when
                    String query = "UPDATE grades SET rating = ?, remark = ?, reviewed = 1, reviewed_when = ? WHERE record_id = ?";

                    try (Connection conn = DatabaseConnection.connect();
                        PreparedStatement pstmt = conn.prepareStatement(query)) {

                        // Set the parameters for the query
                        pstmt.setDouble(1, grade); // Set the grade (rating)
                        pstmt.setString(2, newRemark); // Set the remark
                        pstmt.setTimestamp(3, new java.sql.Timestamp(System.currentTimeMillis())); // Set the current DateTime
                        pstmt.setInt(4, recordID); // Set the record ID (assuming you have it)

                        // Execute the update query
                        int rowsUpdated = pstmt.executeUpdate();

                        if (rowsUpdated > 0) {
                            JOptionPane.showMessageDialog(null,
                                "Grade updated successfully.",
                                "Success",
                                JOptionPane.INFORMATION_MESSAGE);
                            refreshTable_UpdateList();
                        } else {
                            JOptionPane.showMessageDialog(null,
                                "Failed to update the grade.",
                                "Error",
                                JOptionPane.ERROR_MESSAGE);
                        }
                    } catch (SQLException e) {
                        // Handle SQL exceptions
                        JOptionPane.showMessageDialog(null,
                            "Database error: " + e.getMessage(),
                            "Error",
                            JOptionPane.ERROR_MESSAGE);
                    }
                }
            }
        } catch (NumberFormatException e) {
            if(lbl_seeName.getText().equals("-")){
                JOptionPane.showMessageDialog(null,
                    "No selected kiosk alert.",
                    "Invalid Input.",
                    JOptionPane.WARNING_MESSAGE);
            }
            else if(newGrade.length()==0){
                JOptionPane.showMessageDialog(null,
                    "Updated Grade is blank.",
                    "Invalid Input.",
                    JOptionPane.WARNING_MESSAGE);
            }else{
                JOptionPane.showMessageDialog(null,
                    "Updated Grade is not a valid number.",
                    "Invalid Input.",
                    JOptionPane.WARNING_MESSAGE);
            }

        }

    }//GEN-LAST:event_btn_updateRecordActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btn_updateRecord;
    private javax.swing.JComboBox<String> combo_remark;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JLabel jlblCourse1;
    private javax.swing.JLabel lbl_seeCode;
    private javax.swing.JLabel lbl_seeDescrip;
    private javax.swing.JLabel lbl_seeGrade;
    private javax.swing.JLabel lbl_seeName;
    private javax.swing.JLabel lbl_seeProgYrBlk;
    private javax.swing.JLabel lbl_seeRatingNote;
    private javax.swing.JPanel pan_kioskAlertInfo;
    private javax.swing.JTextField txt_newGrade;
    // End of variables declaration//GEN-END:variables

    private void refreshTable_UpdateList() {
        tableModel.setRowCount(0);
        lbl_seeCode.setText("-");
        lbl_seeDescrip.setText("-");
        lbl_seeGrade.setText("-");
        lbl_seeName.setText("-");
        lbl_seeProgYrBlk.setText("-");
        lbl_seeRatingNote.setText("-");
        txt_newGrade.setText("");
        combo_remark.setSelectedIndex(0);
        
        // List to store the results
        results = new ArrayList<>();

        // SQL query to fetch required data
        String query = "SELECT "
            + "g.record_id, "
            + "g.student_id, "
            + "g.subject_code, "
            + "g.rating, "
            + "g.remark, "
            + "g.review_request_when, "
            + "s.program_code, "
            + "s.first_name, "
            + "s.middle_name, "
            + "s.last_name, "
            + "s.suffix, "
            + "s.current_year, "
            + "s.current_block, "
            + "sub.description "  // Assuming description column exists in subjects table
            + "FROM grades g "
            + "JOIN students s ON g.student_id = s.student_id "
            + "JOIN subjects sub ON g.subject_code = sub.code "  // Join with subjects table
            + "AND s.program_code = sub.program "  // Match program_code in students and subjects table
            + "AND s.curriculum_code = sub.curriculum "  // Match curriculum_code in students and subjects table
            + "WHERE g.review_request = 1 AND g.reviewed = 0 "
            + "ORDER BY g.review_request_when ASC;";

        try (Connection conn = DatabaseConnection.connect();
             PreparedStatement pstmt = conn.prepareStatement(query);
             ResultSet rs = pstmt.executeQuery()) {

            // Process the result set and populate the table
            while (rs.next()) {
                java.sql.Timestamp reviewRequestWhen = rs.getTimestamp("review_request_when");
                int recordId = rs.getInt("record_id");
                String studentId = rs.getString("student_id");
                String subjectCode = rs.getString("subject_code");
                String subjectDescrip = rs.getString("description");
                double rating = rs.getDouble("rating");
                String remark = rs.getString("remark");
                String programCode = rs.getString("program_code");
                String firstName = rs.getString("first_name");
                String middleName = rs.getString("middle_name");
                String lastName = rs.getString("last_name");
                String suffix = rs.getString("suffix");
                String currentYear = rs.getString("current_year");
                String currentBlock = rs.getString("current_block");

                // Format the student's full name
                String studentFullName = lastName + ", " + firstName
                                        + (suffix != null && !suffix.isEmpty() ? " " + suffix : "")
                                        + (middleName != null && !middleName.isEmpty() ? " " + middleName : "");

                // Add row to the table model
                Object[] tableRow = {reviewRequestWhen, studentFullName, subjectCode};
                tableModel.addRow(tableRow);

                // Add full row details to the results list
                Object[] fullRow = {
                    studentFullName,    // Student Name
                    programCode,        // Program Code
                    currentYear,        // Year
                    currentBlock,       // Block
                    subjectCode,        // Subject
                    rating,             // Rating
                    remark,             // Remark
                    reviewRequestWhen,  // DateTime
                    studentId,          // Student ID
                    subjectDescrip,     // Subject Description [9]
                    recordId            //grade record_id [10]
                };
                results.add(fullRow);
            }

            // Set the table model to jTable1
            jTable1.setModel(tableModel);

        } catch (SQLException e) {
            // Log the exception if a SQLException occurs
            
        }
    }
}
